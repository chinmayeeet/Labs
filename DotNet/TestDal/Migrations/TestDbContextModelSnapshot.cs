// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using TestDal;

#nullable disable

namespace TestDal.Migrations
{
    [DbContext(typeof(TestDbContext))]
    partial class TestDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.24")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("ManytoMany2", b =>
                {
                    b.Property<int>("ManysId")
                        .HasColumnType("int");

                    b.Property<int>("toMany2sId")
                        .HasColumnType("int");

                    b.HasKey("ManysId", "toMany2sId");

                    b.HasIndex("toMany2sId");

                    b.ToTable("ManytoMany2");
                });

            modelBuilder.Entity("TestDal.Many", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.HasKey("Id");

                    b.ToTable("Manys");
                });

            modelBuilder.Entity("TestDal.One", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int?>("ToMany1Id")
                        .HasColumnType("int");

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("ToMany1Id");

                    b.ToTable("Ones");
                });

            modelBuilder.Entity("TestDal.Parent", b =>
                {
                    b.Property<int>("ParentKey")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ParentKey"), 1L, 1);

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("ParentKey");

                    b.ToTable("Parents");

                    b.HasDiscriminator<string>("Discriminator").HasValue("Parent");
                });

            modelBuilder.Entity("TestDal.ToMany1", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.HasKey("Id");

                    b.ToTable("toMany1s");
                });

            modelBuilder.Entity("TestDal.toMany2", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.HasKey("Id");

                    b.ToTable("toMany2s");
                });

            modelBuilder.Entity("TestDal.ToOne", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("RelatedToOneId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("RelatedToOneId");

                    b.ToTable("ToOnes");
                });

            modelBuilder.Entity("TestDal.Child", b =>
                {
                    b.HasBaseType("TestDal.Parent");

                    b.Property<int>("Age")
                        .HasColumnType("int");

                    b.Property<DateTime>("BirthDate")
                        .HasColumnType("datetime2");

                    b.HasDiscriminator().HasValue("Child");
                });

            modelBuilder.Entity("TestDal.Child2", b =>
                {
                    b.HasBaseType("TestDal.Parent");

                    b.Property<string>("hobbies")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasDiscriminator().HasValue("Child2");
                });

            modelBuilder.Entity("ManytoMany2", b =>
                {
                    b.HasOne("TestDal.Many", null)
                        .WithMany()
                        .HasForeignKey("ManysId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TestDal.toMany2", null)
                        .WithMany()
                        .HasForeignKey("toMany2sId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("TestDal.One", b =>
                {
                    b.HasOne("TestDal.ToMany1", null)
                        .WithMany("ToManyOnes")
                        .HasForeignKey("ToMany1Id");
                });

            modelBuilder.Entity("TestDal.ToOne", b =>
                {
                    b.HasOne("TestDal.One", "RelatedToOne")
                        .WithMany()
                        .HasForeignKey("RelatedToOneId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("RelatedToOne");
                });

            modelBuilder.Entity("TestDal.ToMany1", b =>
                {
                    b.Navigation("ToManyOnes");
                });
#pragma warning restore 612, 618
        }
    }
}
